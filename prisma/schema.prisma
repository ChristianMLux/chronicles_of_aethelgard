// Prisma schema for Chroniken von Aethelgard

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// NextAuth core models
model User {
  id            String   @id @default(cuid())
  name          String?
  email         String?  @unique
  emailVerified DateTime?
  image         String?
  // Credentials auth
  passwordHash  String?

  player        Player?
  accounts      Account[]
  sessions      Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Game models
model Player {
  id        String  @id @default(cuid())
  userId    String  @unique
  name      String
  class     String  // Baumeister | Kriegsherr | Weiser
  guildId   String?
  researches Json    // { key: level }

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  cities City[]
  loci   Locus[]
  armies Army[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model City {
  id             String   @id @default(cuid())
  ownerId        String
  name           String
  continent      String
  region         String
  territory      Int
  buildingSlots  Int      @default(25)
  buildings      Json     // { Steinbruch: 1, ... }
  production     Json     // { Stein: ratePerHour, ... }
  defense        Json     
  geniusLociId   String?

  // Resources held in city
  stone      BigInt @default(0)
  wood       BigInt @default(0)
  mana       BigInt @default(0)
  food       BigInt @default(0)
  workforce  BigInt @default(0)
  godtears   BigInt @default(0)

  // Capacities
  capStone BigInt @default(50000)
  capWood  BigInt @default(50000)
  capMana  BigInt @default(20000)
  capFood  BigInt @default(50000)

  lastTickAt DateTime @default(now())

  owner Player @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  loci  Locus[]
  originArmies Army[]
}

model Locus {
  id           String @id @default(cuid())
  ownerId      String
  parentCityId String
  buildings    Json

  owner      Player @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  parentCity City   @relation(fields: [parentCityId], references: [id], onDelete: Cascade)
}

model Army {
  id             String   @id @default(cuid())
  ownerId        String
  originCityId   String
  missionType    String   // Angriff | Transport | Stationierung | Kolonisierung | Plündern | Abenteuer
  targetContinent String
  targetRegion    String
  targetTerritory Int
  departureTime   DateTime
  arrivalTime     DateTime
  units           Json     // { "Schwertkämpfer": 500 }
  resourcesCarried Json    
  returnTrip      Boolean  @default(false)

  owner      Player @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  originCity City   @relation(fields: [originCityId], references: [id], onDelete: Cascade)
}


